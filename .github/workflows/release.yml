name: Build

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Version name (default is ref name)'

env:
  # $VERSION is used by release scripts
  VERSION: ${{ github.event.inputs.name || github.ref_name }}

jobs:
  test-scrcpy-server:
    runs-on: ubuntu-latest
    env:
      GRADLE: gradle  # use native gradle instead of ./gradlew in scripts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Test scrcpy-server
        run: release/test_server.sh

  build-scrcpy-server:
    runs-on: ubuntu-latest
    env:
      GRADLE: gradle  # use native gradle instead of ./gradlew in scripts
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Build
        run: release/build_server.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/scrcpy-server

  test-build-scrcpy-server-without-gradle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Build without gradle
        run: server/build_without_gradle.sh

  test-client:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build nasm ffmpeg libsdl2-2.0-0 \
             libsdl2-dev libavcodec-dev libavdevice-dev libavformat-dev \
             libavutil-dev libswresample-dev libusb-1.0-0 libusb-1.0-0-dev \
             libv4l-dev cmake build-essential git

      - name: Test
        run: release/test_client.sh

  test-client-webrtc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build nasm ffmpeg libsdl2-2.0-0 \
             libsdl2-dev libavcodec-dev libavdevice-dev libavformat-dev \
             libavutil-dev libswresample-dev libusb-1.0-0 libusb-1.0-0-dev \
             libv4l-dev cmake build-essential git

      - name: Build and install libdatachannel
        run: |
          git clone --recursive https://github.com/paullouisageneau/libdatachannel.git
          cd libdatachannel
          cmake -B build -DUSE_GNUTLS=0 -DUSE_NICE=0 -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          sudo cmake --install build

      - name: Test WebRTC build
        run: |
          meson setup build -Dwebrtc=true --buildtype=debug
          meson test -C build

  build-linux-x86_64:
    runs-on: ubuntu-22.04
    steps:
      - name: Check architecture
        run: |
            arch=$(uname -m)
            if [[ "$arch" != x86_64 ]]
            then
                echo "Unexpected architecture: $arch" >&2
                exit 1
            fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build nasm ffmpeg libsdl2-2.0-0 \
             libsdl2-dev libavcodec-dev libavdevice-dev libavformat-dev \
             libavutil-dev libswresample-dev libusb-1.0-0 libusb-1.0-0-dev \
             libv4l-dev cmake build-essential git

      - name: Build and install libdatachannel
        run: |
          git clone --recursive https://github.com/paullouisageneau/libdatachannel.git
          cd libdatachannel
          cmake -B build -DUSE_GNUTLS=0 -DUSE_NICE=0 -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          sudo cmake --install build

      - name: Build
        run: release/build_linux.sh x86_64

      # upload-artifact does not preserve permissions
      - name: Tar
        run: |
            cd release/work/build-linux-x86_64
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-x86_64-intermediate
          path: release/work/build-linux-x86_64/dist-tar/

  build-linux-x86_64-webrtc:
    runs-on: ubuntu-22.04
    steps:
      - name: Check architecture
        run: |
            arch=$(uname -m)
            if [[ "$arch" != x86_64 ]]
            then
                echo "Unexpected architecture: $arch" >&2
                exit 1
            fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build nasm ffmpeg libsdl2-2.0-0 \
             libsdl2-dev libavcodec-dev libavdevice-dev libavformat-dev \
             libavutil-dev libswresample-dev libusb-1.0-0 libusb-1.0-0-dev \
             libv4l-dev cmake build-essential git

      - name: Build and install libdatachannel
        run: |
          git clone --recursive https://github.com/paullouisageneau/libdatachannel.git
          cd libdatachannel
          cmake -B build -DUSE_GNUTLS=0 -DUSE_NICE=0 -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          sudo cmake --install build

      - name: Build with WebRTC
        run: |
          mkdir -p release/work/build-linux-x86_64-webrtc
          cd release/work/build-linux-x86_64-webrtc
          meson setup build ../../../ -Dwebrtc=true --buildtype=release
          meson compile -C build
          mkdir -p dist/
          cp build/scrcpy dist/scrcpy-webrtc
          strip dist/scrcpy-webrtc

      # upload-artifact does not preserve permissions
      - name: Tar
        run: |
            cd release/work/build-linux-x86_64-webrtc
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-linux-x86_64-webrtc-intermediate
          path: release/work/build-linux-x86_64-webrtc/dist-tar/

  build-win32:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build nasm ffmpeg libsdl2-2.0-0 \
             libsdl2-dev libavcodec-dev libavdevice-dev libavformat-dev \
             libavutil-dev libswresample-dev libusb-1.0-0 libusb-1.0-0-dev \
             mingw-w64 mingw-w64-tools libz-mingw-w64-dev cmake build-essential git

      - name: Build
        run: release/build_windows.sh 32

      # upload-artifact does not preserve permissions
      - name: Tar
        run: |
            cd release/work/build-win32
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-win32-intermediate
          path: release/work/build-win32/dist-tar/

  build-win32-webrtc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build nasm ffmpeg libsdl2-2.0-0 \
             libsdl2-dev libavcodec-dev libavdevice-dev libavformat-dev \
             libavutil-dev libswresample-dev libusb-1.0-0 libusb-1.0-0-dev \
             mingw-w64 mingw-w64-tools libz-mingw-w64-dev cmake build-essential git

      - name: Build and install libdatachannel for cross-compilation
        run: |
          git clone --recursive https://github.com/paullouisageneau/libdatachannel.git
          cd libdatachannel
          # Cross-compile for Windows 32-bit
          cmake -B build-win32 \
            -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-mingw32.cmake \
            -DUSE_GNUTLS=0 -DUSE_NICE=0 -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr/i686-w64-mingw32
          cmake --build build-win32
          sudo cmake --install build-win32

      - name: Build dependencies
        run: |
          app/deps/adb_windows.sh
          app/deps/sdl.sh win32 cross shared
          app/deps/dav1d.sh win32 cross shared
          app/deps/ffmpeg.sh win32 cross shared
          app/deps/libusb.sh win32 cross shared

      - name: Build with WebRTC
        run: |
          DEPS_INSTALL_DIR="$PWD/app/deps/work/install/win32-cross-shared"
          mkdir -p release/work/build-win32-webrtc
          cd release/work/build-win32-webrtc
          meson setup build ../../../ \
            --pkg-config-path="$DEPS_INSTALL_DIR/lib/pkgconfig" \
            -Dc_args="-I$DEPS_INSTALL_DIR/include -I/usr/i686-w64-mingw32/include" \
            -Dc_link_args="-L$DEPS_INSTALL_DIR/lib -L/usr/i686-w64-mingw32/lib" \
            --cross-file=../../../cross_win32.txt \
            --buildtype=release --strip -Db_lto=true \
            -Dcompile_server=false -Dportable=true -Dwebrtc=true
          meson compile -C build
          mkdir -p dist/
          cp build/app/scrcpy.exe dist/scrcpy-webrtc.exe
          cp ../../../app/data/scrcpy-console.bat dist/
          cp ../../../app/data/scrcpy-noconsole.vbs dist/
          cp ../../../app/data/icon.png dist/
          cp ../../../app/data/open_a_terminal_here.bat dist/
          cp "$DEPS_INSTALL_DIR"/bin/*.dll dist/
          cp -r ../../../app/deps/work/install/adb-windows/. dist/

      # upload-artifact does not preserve permissions
      - name: Tar
        run: |
            cd release/work/build-win32-webrtc
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-win32-webrtc-intermediate
          path: release/work/build-win32-webrtc/dist-tar/

  build-win64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build nasm ffmpeg libsdl2-2.0-0 \
             libsdl2-dev libavcodec-dev libavdevice-dev libavformat-dev \
             libavutil-dev libswresample-dev libusb-1.0-0 libusb-1.0-0-dev \
             mingw-w64 mingw-w64-tools libz-mingw-w64-dev

      - name: Build
        run: release/build_windows.sh 64

      # upload-artifact does not preserve permissions
      - name: Tar
        run: |
            cd release/work/build-win64
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-win64-intermediate
          path: release/work/build-win64/dist-tar/

  build-win64-webrtc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y meson ninja-build nasm ffmpeg libsdl2-2.0-0 \
             libsdl2-dev libavcodec-dev libavdevice-dev libavformat-dev \
             libavutil-dev libswresample-dev libusb-1.0-0 libusb-1.0-0-dev \
             mingw-w64 mingw-w64-tools libz-mingw-w64-dev cmake build-essential git

      - name: Build and install libdatachannel for cross-compilation
        run: |
          git clone --recursive https://github.com/paullouisageneau/libdatachannel.git
          cd libdatachannel
          # Cross-compile for Windows 64-bit
          cmake -B build-win64 \
            -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-mingw64.cmake \
            -DUSE_GNUTLS=0 -DUSE_NICE=0 -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr/x86_64-w64-mingw32
          cmake --build build-win64
          sudo cmake --install build-win64

      - name: Build dependencies
        run: |
          app/deps/adb_windows.sh
          app/deps/sdl.sh win64 cross shared
          app/deps/dav1d.sh win64 cross shared
          app/deps/ffmpeg.sh win64 cross shared
          app/deps/libusb.sh win64 cross shared

      - name: Build with WebRTC
        run: |
          DEPS_INSTALL_DIR="$PWD/app/deps/work/install/win64-cross-shared"
          mkdir -p release/work/build-win64-webrtc
          cd release/work/build-win64-webrtc
          meson setup build ../../../ \
            --pkg-config-path="$DEPS_INSTALL_DIR/lib/pkgconfig" \
            -Dc_args="-I$DEPS_INSTALL_DIR/include -I/usr/x86_64-w64-mingw32/include" \
            -Dc_link_args="-L$DEPS_INSTALL_DIR/lib -L/usr/x86_64-w64-mingw32/lib" \
            --cross-file=../../../cross_win64.txt \
            --buildtype=release --strip -Db_lto=true \
            -Dcompile_server=false -Dportable=true -Dwebrtc=true
          meson compile -C build
          mkdir -p dist/
          cp build/app/scrcpy.exe dist/scrcpy-webrtc.exe
          cp ../../../app/data/scrcpy-console.bat dist/
          cp ../../../app/data/scrcpy-noconsole.vbs dist/
          cp ../../../app/data/icon.png dist/
          cp ../../../app/data/open_a_terminal_here.bat dist/
          cp "$DEPS_INSTALL_DIR"/bin/*.dll dist/
          cp -r ../../../app/deps/work/install/adb-windows/. dist/

      # upload-artifact does not preserve permissions
      - name: Tar
        run: |
            cd release/work/build-win64-webrtc
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-win64-webrtc-intermediate
          path: release/work/build-win64-webrtc/dist-tar/

  build-macos-aarch64:
    runs-on: macos-latest
    steps:
      - name: Check architecture
        run: |
            arch=$(uname -m)
            if [[ "$arch" != arm64 ]]
            then
                echo "Unexpected architecture: $arch" >&2
                exit 1
            fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
            brew install meson ninja nasm libiconv zlib automake autoconf \
                libtool

      - name: Build
        env:
          # the default Xcode (and macOS SDK) version can be found at
          # <https://github.com/actions/runner-images/blob/main/images/macos/macos-15-Readme.md#xcode>
          #
          # then the minimal supported deployment target of that macOS SDK can be found at
          # <https://developer.apple.com/support/xcode/#minimum-requirements>
          MACOSX_DEPLOYMENT_TARGET: 10.13
        run: release/build_macos.sh aarch64

      # upload-artifact does not preserve permissions
      - name: Tar
        run: |
            cd release/work/build-macos-aarch64
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-macos-aarch64-intermediate
          path: release/work/build-macos-aarch64/dist-tar/

  build-macos-aarch64-webrtc:
    runs-on: macos-latest
    steps:
      - name: Check architecture
        run: |
            arch=$(uname -m)
            if [[ "$arch" != arm64 ]]
            then
                echo "Unexpected architecture: $arch" >&2
                exit 1
            fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
            brew install meson ninja nasm libiconv zlib automake autoconf \
                libtool cmake

      - name: Build and install libdatachannel
        run: |
          git clone --recursive https://github.com/paullouisageneau/libdatachannel.git
          cd libdatachannel
          cmake -B build -DUSE_GNUTLS=0 -DUSE_NICE=0 -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          sudo cmake --install build

      - name: Build dependencies
        run: |
          app/deps/adb_macos.sh
          app/deps/sdl.sh macos native static
          app/deps/dav1d.sh macos native static
          app/deps/ffmpeg.sh macos native static
          app/deps/libusb.sh macos native static

      - name: Build with WebRTC
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.13
        run: |
          DEPS_INSTALL_DIR="$PWD/app/deps/work/install/macos-native-static"
          mkdir -p release/work/build-macos-aarch64-webrtc
          cd release/work/build-macos-aarch64-webrtc
          meson setup build ../../../ \
            --pkg-config-path="$DEPS_INSTALL_DIR/lib/pkgconfig" \
            -Dc_args="-I$DEPS_INSTALL_DIR/include" \
            -Dc_link_args="-L$DEPS_INSTALL_DIR/lib" \
            --buildtype=release --strip -Db_lto=true \
            -Dcompile_server=false -Dportable=true -Dstatic=true -Dwebrtc=true
          meson compile -C build
          mkdir -p dist/
          cp build/app/scrcpy dist/scrcpy-webrtc
          cp ../../../app/data/icon.png dist/
          cp ../../../app/scrcpy.1 dist/
          cp -r ../../../app/deps/work/install/adb-macos/. dist/

      # upload-artifact does not preserve permissions
      - name: Tar
        run: |
            cd release/work/build-macos-aarch64-webrtc
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-macos-aarch64-webrtc-intermediate
          path: release/work/build-macos-aarch64-webrtc/dist-tar/

  build-macos-x86_64:
    runs-on: macos-13
    steps:
      - name: Check architecture
        run: |
            arch=$(uname -m)
            if [[ "$arch" != x86_64 ]]
            then
                echo "Unexpected architecture: $arch" >&2
                exit 1
            fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: brew install meson ninja nasm libiconv zlib automake
             # autoconf and libtool are already installed on macos-13

      - name: Build
        env:
          # the default Xcode (and macOS SDK) version can be found at
          # <https://github.com/actions/runner-images/blob/main/images/macos/macos-13-Readme.md#xcode>
          #
          # then the minimal supported deployment target of that macOS SDK can be found at
          # <https://developer.apple.com/support/xcode/#minimum-requirements>
          MACOSX_DEPLOYMENT_TARGET: 10.13
        run: release/build_macos.sh x86_64

      # upload-artifact does not preserve permissions
      - name: Tar
        run: |
            cd release/work/build-macos-x86_64
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-macos-x86_64-intermediate
          path: release/work/build-macos-x86_64/dist-tar/

  build-macos-x86_64-webrtc:
    runs-on: macos-13
    steps:
      - name: Check architecture
        run: |
            arch=$(uname -m)
            if [[ "$arch" != x86_64 ]]
            then
                echo "Unexpected architecture: $arch" >&2
                exit 1
            fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
            brew install meson ninja nasm libiconv zlib automake cmake
            # autoconf and libtool are already installed on macos-13

      - name: Build and install libdatachannel
        run: |
          git clone --recursive https://github.com/paullouisageneau/libdatachannel.git
          cd libdatachannel
          cmake -B build -DUSE_GNUTLS=0 -DUSE_NICE=0 -DCMAKE_BUILD_TYPE=Release
          cmake --build build
          sudo cmake --install build

      - name: Build dependencies
        run: |
          app/deps/adb_macos.sh
          app/deps/sdl.sh macos native static
          app/deps/dav1d.sh macos native static
          app/deps/ffmpeg.sh macos native static
          app/deps/libusb.sh macos native static

      - name: Build with WebRTC
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.13
        run: |
          DEPS_INSTALL_DIR="$PWD/app/deps/work/install/macos-native-static"
          mkdir -p release/work/build-macos-x86_64-webrtc
          cd release/work/build-macos-x86_64-webrtc
          meson setup build ../../../ \
            --pkg-config-path="$DEPS_INSTALL_DIR/lib/pkgconfig" \
            -Dc_args="-I$DEPS_INSTALL_DIR/include" \
            -Dc_link_args="-L$DEPS_INSTALL_DIR/lib" \
            --buildtype=release --strip -Db_lto=true \
            -Dcompile_server=false -Dportable=true -Dstatic=true -Dwebrtc=true
          meson compile -C build
          mkdir -p dist/
          cp build/app/scrcpy dist/scrcpy-webrtc
          cp ../../../app/data/icon.png dist/
          cp ../../../app/scrcpy.1 dist/
          cp -r ../../../app/deps/work/install/adb-macos/. dist/

      # upload-artifact does not preserve permissions
      - name: Tar
        run: |
            cd release/work/build-macos-x86_64-webrtc
            mkdir dist-tar
            cd dist-tar
            tar -C .. -cvf dist.tar.gz dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-macos-x86_64-webrtc-intermediate
          path: release/work/build-macos-x86_64-webrtc/dist-tar/

  package-linux-x86_64:
    needs:
      - build-scrcpy-server
      - build-linux-x86_64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download scrcpy-server
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: Download build-linux-x86_64
        uses: actions/download-artifact@v4
        with:
          name: build-linux-x86_64-intermediate
          path: release/work/build-linux-x86_64/dist-tar/

      # upload-artifact does not preserve permissions
      - name: Detar
        run: |
            cd release/work/build-linux-x86_64
            tar xf dist-tar/dist.tar.gz

      - name: Package
        run: release/package_client.sh linux-x86_64 tar.gz

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: release-linux-x86_64
          path: release/output/

  package-linux-x86_64-webrtc:
    needs:
      - build-scrcpy-server
      - build-linux-x86_64-webrtc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download scrcpy-server
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: Download build-linux-x86_64-webrtc
        uses: actions/download-artifact@v4
        with:
          name: build-linux-x86_64-webrtc-intermediate
          path: release/work/build-linux-x86_64-webrtc/dist-tar/

      # upload-artifact does not preserve permissions
      - name: Detar
        run: |
            cd release/work/build-linux-x86_64-webrtc
            tar xf dist-tar/dist.tar.gz

      - name: Package WebRTC build
        run: |
            mkdir -p release/output
            cd release/work/build-linux-x86_64-webrtc
            tar -czf ../../output/scrcpy-webrtc-${{ env.VERSION }}-linux-x86_64.tar.gz \
                -C dist scrcpy-webrtc \
                -C ../../../build-server/server scrcpy-server

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: release-linux-x86_64-webrtc
          path: release/output/

  package-win32:
    needs:
      - build-scrcpy-server
      - build-win32
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download scrcpy-server
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: Download build-win32
        uses: actions/download-artifact@v4
        with:
          name: build-win32-intermediate
          path: release/work/build-win32/dist-tar/

      # upload-artifact does not preserve permissions
      - name: Detar
        run: |
            cd release/work/build-win32
            tar xf dist-tar/dist.tar.gz

      - name: Package
        run: release/package_client.sh win32 zip

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: release-win32
          path: release/output/

  package-win64:
    needs:
      - build-scrcpy-server
      - build-win64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download scrcpy-server
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: Download build-win64
        uses: actions/download-artifact@v4
        with:
          name: build-win64-intermediate
          path: release/work/build-win64/dist-tar/

      # upload-artifact does not preserve permissions
      - name: Detar
        run: |
            cd release/work/build-win64
            tar xf dist-tar/dist.tar.gz

      - name: Package
        run: release/package_client.sh win64 zip

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: release-win64
          path: release/output

  package-win32-webrtc:
    needs:
      - build-scrcpy-server
      - build-win32-webrtc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download scrcpy-server
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: Download build-win32-webrtc
        uses: actions/download-artifact@v4
        with:
          name: build-win32-webrtc-intermediate
          path: release/work/build-win32-webrtc/dist-tar/

      # upload-artifact does not preserve permissions
      - name: Detar
        run: |
            cd release/work/build-win32-webrtc
            tar xf dist-tar/dist.tar.gz

      - name: Package WebRTC build
        run: |
            mkdir -p release/output
            cd release/work/build-win32-webrtc
            zip -r ../../output/scrcpy-webrtc-${{ env.VERSION }}-win32.zip \
                dist/scrcpy-webrtc.exe \
                dist/*.dll \
                dist/*.bat \
                dist/*.vbs \
                dist/*.png \
                dist/adb.exe \
                dist/AdbWinApi.dll \
                dist/AdbWinUsbApi.dll \
                ../../../build-server/server/scrcpy-server

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: release-win32-webrtc
          path: release/output/

  package-win64-webrtc:
    needs:
      - build-scrcpy-server
      - build-win64-webrtc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download scrcpy-server
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: Download build-win64-webrtc
        uses: actions/download-artifact@v4
        with:
          name: build-win64-webrtc-intermediate
          path: release/work/build-win64-webrtc/dist-tar/

      # upload-artifact does not preserve permissions
      - name: Detar
        run: |
            cd release/work/build-win64-webrtc
            tar xf dist-tar/dist.tar.gz

      - name: Package WebRTC build
        run: |
            mkdir -p release/output
            cd release/work/build-win64-webrtc
            zip -r ../../output/scrcpy-webrtc-${{ env.VERSION }}-win64.zip \
                dist/scrcpy-webrtc.exe \
                dist/*.dll \
                dist/*.bat \
                dist/*.vbs \
                dist/*.png \
                dist/adb.exe \
                dist/AdbWinApi.dll \
                dist/AdbWinUsbApi.dll \
                ../../../build-server/server/scrcpy-server

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: release-win64-webrtc
          path: release/output/

  package-macos-aarch64:
    needs:
      - build-scrcpy-server
      - build-macos-aarch64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download scrcpy-server
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: Download build-macos-aarch64
        uses: actions/download-artifact@v4
        with:
          name: build-macos-aarch64-intermediate
          path: release/work/build-macos-aarch64/dist-tar/

      # upload-artifact does not preserve permissions
      - name: Detar
        run: |
            cd release/work/build-macos-aarch64
            tar xf dist-tar/dist.tar.gz

      - name: Package
        run: release/package_client.sh macos-aarch64 tar.gz

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: release-macos-aarch64
          path: release/output/

  package-macos-x86_64:
    needs:
      - build-scrcpy-server
      - build-macos-x86_64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download scrcpy-server
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: Download build-macos
        uses: actions/download-artifact@v4
        with:
          name: build-macos-x86_64-intermediate
          path: release/work/build-macos-x86_64/dist-tar/

      # upload-artifact does not preserve permissions
      - name: Detar
        run: |
            cd release/work/build-macos-x86_64
            tar xf dist-tar/dist.tar.gz

      - name: Package
        run: release/package_client.sh macos-x86_64 tar.gz

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: release-macos-x86_64
          path: release/output/

  package-macos-aarch64-webrtc:
    needs:
      - build-scrcpy-server
      - build-macos-aarch64-webrtc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download scrcpy-server
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: Download build-macos-aarch64-webrtc
        uses: actions/download-artifact@v4
        with:
          name: build-macos-aarch64-webrtc-intermediate
          path: release/work/build-macos-aarch64-webrtc/dist-tar/

      # upload-artifact does not preserve permissions
      - name: Detar
        run: |
            cd release/work/build-macos-aarch64-webrtc
            tar xf dist-tar/dist.tar.gz

      - name: Package WebRTC build
        run: |
            mkdir -p release/output
            cd release/work/build-macos-aarch64-webrtc
            tar -czf ../../output/scrcpy-webrtc-${{ env.VERSION }}-macos-aarch64.tar.gz \
                -C dist scrcpy-webrtc \
                -C dist adb \
                -C dist icon.png \
                -C dist scrcpy.1 \
                -C ../../../build-server/server scrcpy-server

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: release-macos-aarch64-webrtc
          path: release/output/

  package-macos-x86_64-webrtc:
    needs:
      - build-scrcpy-server
      - build-macos-x86_64-webrtc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download scrcpy-server
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: Download build-macos-x86_64-webrtc
        uses: actions/download-artifact@v4
        with:
          name: build-macos-x86_64-webrtc-intermediate
          path: release/work/build-macos-x86_64-webrtc/dist-tar/

      # upload-artifact does not preserve permissions
      - name: Detar
        run: |
            cd release/work/build-macos-x86_64-webrtc
            tar xf dist-tar/dist.tar.gz

      - name: Package WebRTC build
        run: |
            mkdir -p release/output
            cd release/work/build-macos-x86_64-webrtc
            tar -czf ../../output/scrcpy-webrtc-${{ env.VERSION }}-macos-x86_64.tar.gz \
                -C dist scrcpy-webrtc \
                -C dist adb \
                -C dist icon.png \
                -C dist scrcpy.1 \
                -C ../../../build-server/server scrcpy-server

      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: release-macos-x86_64-webrtc
          path: release/output/

  release:
    needs:
      - build-scrcpy-server
      - package-linux-x86_64
      - package-linux-x86_64-webrtc
      - package-win32
      - package-win32-webrtc
      - package-win64
      - package-win64-webrtc
      - package-macos-aarch64
      - package-macos-aarch64-webrtc
      - package-macos-x86_64
      - package-macos-x86_64-webrtc
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download scrcpy-server
        uses: actions/download-artifact@v4
        with:
          name: scrcpy-server
          path: release/work/build-server/server/

      - name: Download release-linux-x86_64
        uses: actions/download-artifact@v4
        with:
          name: release-linux-x86_64
          path: release/output/

      - name: Download release-linux-x86_64-webrtc
        uses: actions/download-artifact@v4
        with:
          name: release-linux-x86_64-webrtc
          path: release/output/

      - name: Download release-win32
        uses: actions/download-artifact@v4
        with:
          name: release-win32
          path: release/output/

      - name: Download release-win32-webrtc
        uses: actions/download-artifact@v4
        with:
          name: release-win32-webrtc
          path: release/output/

      - name: Download release-win64
        uses: actions/download-artifact@v4
        with:
          name: release-win64
          path: release/output/

      - name: Download release-win64-webrtc
        uses: actions/download-artifact@v4
        with:
          name: release-win64-webrtc
          path: release/output/

      - name: Download release-macos-aarch64
        uses: actions/download-artifact@v4
        with:
          name: release-macos-aarch64
          path: release/output/

      - name: Download release-macos-aarch64-webrtc
        uses: actions/download-artifact@v4
        with:
          name: release-macos-aarch64-webrtc
          path: release/output/

      - name: Download release-macos-x86_64
        uses: actions/download-artifact@v4
        with:
          name: release-macos-x86_64
          path: release/output/

      - name: Download release-macos-x86_64-webrtc
        uses: actions/download-artifact@v4
        with:
          name: release-macos-x86_64-webrtc
          path: release/output/

      - name: Package server
        run: release/package_server.sh

      - name: Generate checksums
        run: release/generate_checksums.sh

      - name: Create WebRTC documentation package
        run: |
          mkdir -p release/output/webrtc-docs
          cp doc/webrtc.md release/output/webrtc-docs/
          cp build_webrtc.sh release/output/webrtc-docs/
          echo "# scrcpy WebRTC Build" > release/output/webrtc-docs/README.md
          echo "" >> release/output/webrtc-docs/README.md
          echo "This package contains WebRTC-enabled builds of scrcpy." >> release/output/webrtc-docs/README.md
          echo "" >> release/output/webrtc-docs/README.md
          echo "## WebRTC Builds Available:" >> release/output/webrtc-docs/README.md
          echo "- scrcpy-webrtc-${{ env.VERSION }}-linux-x86_64.tar.gz" >> release/output/webrtc-docs/README.md
          echo "- scrcpy-webrtc-${{ env.VERSION }}-win32.zip" >> release/output/webrtc-docs/README.md
          echo "- scrcpy-webrtc-${{ env.VERSION }}-win64.zip" >> release/output/webrtc-docs/README.md
          echo "- scrcpy-webrtc-${{ env.VERSION }}-macos-aarch64.tar.gz" >> release/output/webrtc-docs/README.md
          echo "- scrcpy-webrtc-${{ env.VERSION }}-macos-x86_64.tar.gz" >> release/output/webrtc-docs/README.md
          echo "" >> release/output/webrtc-docs/README.md
          echo "## Documentation:" >> release/output/webrtc-docs/README.md
          echo "- webrtc.md - Complete WebRTC documentation" >> release/output/webrtc-docs/README.md
          echo "- build_webrtc.sh - Build script for WebRTC support" >> release/output/webrtc-docs/README.md
          echo "" >> release/output/webrtc-docs/README.md
          echo "## Quick Start:" >> release/output/webrtc-docs/README.md
          echo "1. Extract the WebRTC build" >> release/output/webrtc-docs/README.md
          echo "2. Run: ./scrcpy-webrtc --webrtc" >> release/output/webrtc-docs/README.md
          echo "3. Open browser: http://localhost:8080" >> release/output/webrtc-docs/README.md
          tar -czf release/output/scrcpy-webrtc-docs-${{ env.VERSION }}.tar.gz -C release/output webrtc-docs

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: scrcpy-release-${{ env.VERSION }}
          path: release/output
